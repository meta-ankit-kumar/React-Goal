{"version":3,"sources":["logo.svg","components/main/index.js","components/timer/index.js","App.js","reportWebVitals.js","index.js"],"names":["Main","useState","Date","currentTime","setCurrentTime","setInterval","Timer","hours","getHours","minutes","getMinutes","seconds","getSeconds","makeTimeUserFriendly","timeParameter","className","displayTime","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"gPAAe,I,mBCEFA,EAAO,WACnB,MAAsCC,mBAAS,IAAIC,MAAO,mBAAnDC,EAAW,KAAEC,EAAc,KAMlC,OADAC,aAH0B,WACzBD,EAAe,IAAIF,KACpB,GAC+B,KAE9B,8BACC,cAACI,EAAK,CAACC,MAAQJ,EAAYK,WAAa,GAAIC,QAASN,EAAYO,aAAcC,QAASR,EAAYS,gBAGvG,ECNMC,G,MAAuB,SAACC,GAAa,OAAKA,GAAiB,EAAI,IAAMA,EAAeA,CAAc,GAE3FR,EAAQ,SAAH,GACjB,OATmB,SAACC,EAAOE,EAASE,GACpC,OACC,sBAAKI,UAAU,YAAW,UAAEF,EAAqBN,GAAO,sBAAMQ,UAAU,OAAM,SAAC,MAASF,EAAqBJ,GAAS,sBAAMM,UAAU,OAAM,SAAC,MAASF,EAAqBF,KAE7K,CAMEK,CAF0B,EAALT,MAAc,EAAPE,QAAgB,EAAPE,QAIvC,ECJeM,MANf,WACE,OACE,cAAC,EAAI,GAET,ECIeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJaQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,OAORd,G","file":"static/js/main.40e4e536.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from \"react\";\nimport { Timer } from \"..\";\nexport const Main = () => {\n\tconst [currentTime, setCurrentTime] = useState(new Date());\n\n\tconst updateCurrentTime = () => {\n\t\tsetCurrentTime(new Date());\n\t}\n\tsetInterval(updateCurrentTime, 1000);\n\treturn (\n\t\t<div>\n\t\t\t<Timer hours={ currentTime.getHours() % 12} minutes={currentTime.getMinutes()} seconds={currentTime.getSeconds()}/>\n\t\t</div>\n\t)\n}","import './timer.css';\n\nconst displayTime = (hours, minutes, seconds) => {\n\treturn (\n\t\t<div className='time-info'>{makeTimeUserFriendly(hours)}<span className='dots'>:</span>{makeTimeUserFriendly(minutes)}<span className='dots'>:</span>{makeTimeUserFriendly(seconds)}</div>\n\t)\n}\n\nconst makeTimeUserFriendly = (timeParameter) => timeParameter <= 9 ? '0' + timeParameter: timeParameter;\n\nexport const Timer = ({hours, minutes, seconds}) => {\n\treturn (\n\t\tdisplayTime(hours, minutes, seconds)\n\t)\n}","import logo from './logo.svg';\nimport './App.css';\nimport { Main } from './components';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}